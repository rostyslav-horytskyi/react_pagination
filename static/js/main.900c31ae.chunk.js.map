{"version":3,"sources":["components/Pagination.js","App.js","index.js"],"names":["Pagination","visibleButtons","totalPosts","perPages","selectedPage","onPageChange","onNext","onPrev","onPerPageChange","availableButtons","Array","Math","ceil","length","fill","map","el","index","createNavigationLi","num","key","className","active","href","onClick","e","preventDefault","createButtonLi","disable","label","btnSymbol","eventCallback","disabled","aria-label","aria-hidden","filter","btn","slice","defaultValue","defaultProps","postFromServer","App","state","post","event","p","textContent","target","setState","value","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sPAIaA,EAAa,SAAC,GAQpB,IAIDC,EAXJC,EAOI,EAPJA,WACAC,EAMI,EANJA,SACAC,EAKI,EALJA,aACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,gBAEMC,EAAmBC,MAAMC,KAAKC,KAAKV,EAAWW,OAASV,IAC1DW,KAAK,GACLC,KAAI,SAACC,EAAIC,GAAL,OAAeD,EAAKC,KAG3B,SAASC,EAAmBC,EAAKC,GAC/B,OACE,wBACEA,IAAKA,EACLC,UAAWA,IACT,YACA,CAAEC,QAASlB,IAAiBe,KAG9B,uBACEE,UAAU,YACVE,KAAK,IACLC,QAAS,SAACC,GACRA,EAAEC,iBACFrB,EAAaoB,KAGdN,IAMT,SAASQ,EAAeC,EAASC,EAAOC,EAAWC,GACjD,OACE,wBACEV,UAAWA,IACT,YACA,CAAEW,UAAW5B,IAAiBwB,KAGhC,uBACEP,UAAU,YACVE,KAAK,IACLU,aAAYJ,EACZL,QAAS,SAACC,GACRA,EAAEC,iBACFK,MAGF,0BAAMG,cAAY,QAAQJ,KAwDlC,OAlDIrB,EAAiBI,OAAS,IACvBT,GAAgB,IACnBH,EACE,oCAEIQ,EAAiB0B,QAAO,SAAAnB,GAAE,OAAIA,GAAMZ,EAAe,KAChDW,KAAI,SAAAqB,GAAG,OAAIlB,EAAmBkB,EAAKA,MAEvClB,EAAmB,OACnBA,EAAmBT,EAAiBI,WAKtCT,GAAgB,IACnBH,EACE,oCACGiB,EAAmB,GACnBA,EAAmB,OAElB,YAAIT,GAAkB4B,MAAM,EAAG5B,EAAiBI,OAAS,GAAGsB,QAC1D,SAAAnB,GAAE,OAAIA,IAAOZ,EAAe,GAAKY,IAAOZ,EAAe,KACvDW,KAAI,SAAAqB,GAAG,OAAIlB,EAAmBkB,EAAKA,MAEtClB,EAAmB,OACnBA,EAAmBT,EAAiBI,WAKtCT,GAAgBK,EAAiBI,OAAS,IAC7CZ,EACE,oCACGiB,EAAmB,GACnBA,EAAmB,OAElBT,EAAiB0B,QAAO,SAAAnB,GAAE,OAAIA,GAAMZ,EAAe,KAChDW,KAAI,SAAAqB,GAAG,OAAIlB,EAAmBkB,EAAKA,SAM9CnC,EACE,oCACGQ,EAAiBM,KAAI,SAAAqB,GAAG,OAAIlB,EAAmBkB,EAAKA,OAMzD,oCACE,yBAAKH,aAAW,mBACd,wBAAIZ,UAAU,qCACXM,EAAe,EAAG,WAAY,OAAKpB,GACnCN,EACA0B,GAAgBlB,EAAiBI,OAAQ,OAAQ,OAAKP,KAI3D,4BAAQkB,QAAS,SAAAC,GAAC,OAAIjB,EAAgBiB,IAAIa,aAAc,GACtD,qCACA,qCACA,sCACA,yCAgBRtC,EAAWuC,aAAe,CACxBpC,SAAU,EACVC,aAAc,GC7IhB,IAAMoC,EAAiB9B,MAAM,IAAII,KAAK,GAAGC,KAAI,SAACC,EAAIC,GAAL,OAAeD,EAAKC,KA+ElDwB,E,4MA5EbC,MAAQ,CACNtC,aAAc,EACdD,SAAU,EACVD,WAAW,YAAKsC,GAChBG,KAAM,G,EAGRtC,aAAe,SAACuC,GAAW,IAErBC,EADIC,EAAgBF,EAAMG,OAAtBD,YAIND,EADEC,GAAe,EAAKJ,MAAMtC,aACxB,EAAKsC,MAAMC,KAAO,EAAKD,MAAMvC,SAE7B,EAAKuC,MAAMC,KAAO,EAAKD,MAAMvC,SAGnC,EAAK6C,SAAS,CACZ5C,aAAc0C,EACdH,KAAME,K,EAIVrC,gBAAkB,SAACoC,GAAW,IACpBK,EAAUL,EAAMG,OAAhBE,MAER,EAAKD,SAAS,CACZ7C,UAAW8C,EACX7C,aAAc,EACduC,KAAM,K,EAIVrC,OAAS,WACP,EAAK0C,UAAS,SAAAN,GAAK,MAAK,CACtBtC,aAAcsC,EAAMtC,aAAe,EACnCuC,KAAMD,EAAMC,KAAOD,EAAMvC,c,EAI7BI,OAAS,WACP,EAAKyC,UAAS,SAAAN,GAAK,MAAK,CACtBtC,aAAcsC,EAAMtC,aAAe,EACnCuC,KAAMD,EAAMC,KAAOD,EAAMvC,c,4CAI7B,WAAU,IAAD,EAC8C+C,KAAKR,MAAlDtC,EADD,EACCA,aAAcF,EADf,EACeA,WAAYC,EAD3B,EAC2BA,SAAUwC,EADrC,EACqCA,KAE5C,OACE,yBAAKtB,UAAU,eACb,mCAEG,IACAjB,EACA,IACAO,KAAKC,KAAKV,EAAWW,OAASV,IAEjC,kBAAC,EAAD,iBACM+C,KAAKR,MADX,CAEErC,aAAc6C,KAAK7C,aACnBG,gBAAiB0C,KAAK1C,gBACtBF,OAAQ4C,KAAK5C,OACbC,OAAQ2C,KAAK3C,UAEf,0CACWoC,EADX,YACmBA,GAAQxC,EAAW,GAAKD,EAAWW,OAChD8B,GAAQxC,EAAW,GAClBD,EAAWW,OAAS8B,EAAQA,EAHnC,eAG8CzC,EAAWW,c,GAtE/CsC,IAAMC,WCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.900c31ae.chunk.js","sourcesContent":["import React from 'react';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Pagination = ({\n  totalPosts,\n  perPages,\n  selectedPage,\n  onPageChange,\n  onNext,\n  onPrev,\n  onPerPageChange,\n}) => {\n  const availableButtons = Array(Math.ceil(totalPosts.length / perPages))\n    .fill(1)\n    .map((el, index) => el + index);\n  let visibleButtons;\n\n  function createNavigationLi(num, key) {\n    return (\n      <li\n        key={key}\n        className={className(\n          'page-item',\n          { active: +selectedPage === num },\n        )}\n      >\n        <a\n          className=\"page-link\"\n          href=\"/\"\n          onClick={(e) => {\n            e.preventDefault();\n            onPageChange(e);\n          }}\n        >\n          {num}\n        </a>\n      </li>\n    );\n  }\n\n  function createButtonLi(disable, label, btnSymbol, eventCallback) {\n    return (\n      <li\n        className={className(\n          'page-item',\n          { disabled: +selectedPage === disable },\n        )}\n      >\n        <a\n          className=\"page-link\"\n          href=\"/\"\n          aria-label={label}\n          onClick={(e) => {\n            e.preventDefault();\n            eventCallback();\n          }}\n        >\n          <span aria-hidden=\"true\">{btnSymbol}</span>\n        </a>\n      </li>\n    );\n  }\n\n  if (availableButtons.length > 3) {\n    if (+selectedPage <= 3) {\n      visibleButtons = (\n        <>\n          {\n            availableButtons.filter(el => el < +selectedPage + 2)\n              .map(btn => createNavigationLi(btn, btn))\n          }\n          {createNavigationLi('...')}\n          {createNavigationLi(availableButtons.length)}\n        </>\n      );\n    }\n\n    if (+selectedPage >= 4) {\n      visibleButtons = (\n        <>\n          {createNavigationLi(1)}\n          {createNavigationLi('...')}\n          {\n            [...availableButtons].slice(2, availableButtons.length - 2).filter(\n              el => el >= +selectedPage - 1 && el <= +selectedPage + 1,\n            ).map(btn => createNavigationLi(btn, btn))\n          }\n          {createNavigationLi('...')}\n          {createNavigationLi(availableButtons.length)}\n        </>\n      );\n    }\n\n    if (+selectedPage >= availableButtons.length - 2) {\n      visibleButtons = (\n        <>\n          {createNavigationLi(1)}\n          {createNavigationLi('...')}\n          {\n            availableButtons.filter(el => el > +selectedPage - 2)\n              .map(btn => createNavigationLi(btn, btn))\n          }\n        </>\n      );\n    }\n  } else {\n    visibleButtons = (\n      <>\n        {availableButtons.map(btn => createNavigationLi(btn, btn))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <nav aria-label=\"Page navigation\">\n        <ul className=\"pagination justify-content-center\">\n          {createButtonLi(1, 'Previous', '«', onPrev)}\n          {visibleButtons}\n          {createButtonLi(+availableButtons.length, 'Next', '»', onNext)}\n        </ul>\n      </nav>\n\n      <select onClick={e => onPerPageChange(e)} defaultValue={5}>\n        <option>3</option>\n        <option>5</option>\n        <option>10</option>\n        <option>20</option>\n      </select>\n    </>\n  );\n};\n\nPagination.propTypes = {\n  totalPosts: PropTypes.arrayOf(PropTypes.number).isRequired,\n  perPages: PropTypes.number,\n  selectedPage: PropTypes.number,\n  onPageChange: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n  onPrev: PropTypes.func.isRequired,\n  onPerPageChange: PropTypes.func.isRequired,\n};\n\nPagination.defaultProps = {\n  perPages: 5,\n  selectedPage: 1,\n};\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\n\nconst postFromServer = Array(42).fill(1).map((el, index) => el + index);\n\nclass App extends React.Component {\n  state = {\n    selectedPage: 1,\n    perPages: 5,\n    totalPosts: [...postFromServer],\n    post: 1,\n  }\n\n  onPageChange = (event) => {\n    const { textContent } = event.target;\n    let p;\n\n    if (textContent > +this.state.selectedPage) {\n      p = this.state.post + this.state.perPages;\n    } else {\n      p = this.state.post - this.state.perPages;\n    }\n\n    this.setState({\n      selectedPage: textContent,\n      post: p,\n    });\n  }\n\n  onPerPageChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      perPages: +value,\n      selectedPage: 1,\n      post: 1,\n    });\n  }\n\n  onNext = () => {\n    this.setState(state => ({\n      selectedPage: state.selectedPage + 1,\n      post: state.post + state.perPages,\n    }));\n  }\n\n  onPrev = () => {\n    this.setState(state => ({\n      selectedPage: state.selectedPage - 1,\n      post: state.post - state.perPages,\n    }));\n  }\n\n  render() {\n    const { selectedPage, totalPosts, perPages, post } = this.state;\n\n    return (\n      <div className=\"text-center\">\n        <h1>\n          Page\n          {' '}\n          {selectedPage}\n          {'/'}\n          {Math.ceil(totalPosts.length / perPages)}\n        </h1>\n        <Pagination\n          {...this.state}\n          onPageChange={this.onPageChange}\n          onPerPageChange={this.onPerPageChange}\n          onNext={this.onNext}\n          onPrev={this.onPrev}\n        />\n        <p>\n          {`Post ${post}-${post + (perPages - 1) < totalPosts.length\n            ? post + (perPages - 1)\n            : (totalPosts.length - post) + post} of ${totalPosts.length}`}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}